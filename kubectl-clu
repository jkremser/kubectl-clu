#!/bin/bash
set -e

DIR="${DIR:-$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )}"
FLATCAR_K8S_VERSIONS=(v1.24.12)
UBUNTU_K8S_VERSIONS=(v1.25.6 v1.24.11 v1.23.16 v1.22.5+vmware.1)
TEMPLATE_FILE=${TEMPLATE_FILE:-"cluster-list.yaml"}
export ORG=${ORG:-"giantswarm"}
export CLUSTER_VERSION=${CLUSTER_VERSION:-"0.8.0"}
export DEFAULT_APPS_VERSION=${DEFAULT_APPS_VERSION:-"0.11.2"}

main() {
    [[ $# -lt 1 ]] && print_usage && exit 1
    for c in bat curl figlet fzf kubectl yq jq; do
        ! command -v "${c}" &> /dev/null && echo "Install "${c}", this script needs it" && exit 2
    done
    
    [[ $1 == create ]] || [[ $1 == c ]] && {
        check_template
        deploy
        exit 0
    }

    [[ $1 == delete ]] || [[ $1 == d ]] && {
        delete
        exit 0
    }
    [[ $1 == -v ]] || [[ $1 == --version ]] && {
        print_version
        exit 0
    }
    print_usage
}

deploy() {
    export COL="\e[2;35;49m"
    export RES="\e[0m"

    # os
    OS=$(echo -e "ubuntu\nflatcar" | fzf --header "Select OS" --prompt='λ')
    [[ ${OS} == "ubuntu" ]] && {
        export IMG_TEMPLATE="ubuntu-2004-kube-\$K8S_VERSION"
        K8S_VERSIONS="${UBUNTU_K8S_VERSIONS[@]}"
    } || {
        export IMG_TEMPLATE="flatcar-stable-3602.2.1-kube-\$K8S_VERSION-gs"
        K8S_VERSIONS="${FLATCAR_K8S_VERSIONS[@]}"
    }

    # k8s version
    K8S_VERSION=$(printf "%s\n" "${K8S_VERSIONS}" | \
     tr ' ' '\n' | \
     fzf --header "Select k8s version" --prompt='λ' --cycle --preview-window top:80% \
      --preview "printf '${COL}'; figlet -f big GiantSwarm.io; printf '${RES}'; echo -e 'values.yaml for cluster chart:\n=============================='; export K8S_VERSION={}; export IMG_TEMPLATE=$(echo $IMG_TEMPLATE | K8S_VERSION={} envsubst); cat "${TEMPLATE_FILE}" | envsubst | yq 'select(documentIndex == 0) | .data.values' - | yq --colors")

    export K8S_VERSION

    # name
    echo "cluster name:"
    read -e CLUSTER
    export CLUSTER
    [[ -z $CLUSTER ]] && echo "Cluster name can't be empty" && exit 1

    # ip
    echo "control plane ip? (leave empty for auto-assignment)"
    read -e IP

    # apps version
    echo -e "Apps version: ${DEFAULT_APPS_VERSION}? [Y/n]"
	read -n1 _resp
	[[ $_resp =~ [nN] ]] && {
        DEFAULT_APPS_VERSION=$(curl -s https://api.github.com/repos/giantswarm/default-apps-vsphere/releases | jq -r '.[].name | sub("^v"; "")' | \
        fzf --header "Select version for default apps" --prompt='λ' --cycle --preview-window top:80% \
          --preview "printf '${COL}'; figlet -f big GiantSwarm.io; printf '${RES}'; echo -e 'App manifest for default apps\n=============================='; export DEFAULT_APPS_VERSION={}; cat "${TEMPLATE_FILE}" | envsubst | yq 'select(documentIndex == 3)' --colors")
    }

    # org
    echo -e "Organization: ${ORG}? [Y/n]"
	read -n1 _resp
	[[ $_resp =~ [nN] ]] && {
        ORG=$(kubectl get organizations.security.giantswarm.io --no-headers -o custom-columns=":metadata.name" | \
     fzf --header "Select organization" --prompt='λ' --cycle --preview-window top:80% \
      --preview "printf '${COL}'; figlet -f big GiantSwarm.io; printf '${RES}'; echo -e 'values.yaml for cluster chart: (configmaps will be created in org-{} namespace)\n=============================='; export ORG={}; cat "${TEMPLATE_FILE}" | envsubst | yq 'select(documentIndex == 0) | .data.values' - | yq --colors")
    }

    export CLUSTER IP ORG DEFAULT_APPS_VERSION

    export CLUSTER_CATALOG=cluster
    TEST_CATALOG=$(echo -e "no\nyes" | fzf --header "test catalog?" --prompt='λ')

    [[ ${TEST_CATALOG} == "yes" ]] && {
        export CLUSTER_CATALOG=cluster-test
        _possible_versions=$(curl -s https://giantswarm.github.io/cluster-test-catalog/index.yaml | grep -A1 cluster-vsphere | grep version: | cut -f2 -d':')
        _filtered_versions=()
        echo "Fetching the versions.."
        {
            rm -rf deleteme-temp
            git clone https://github.com/giantswarm/cluster-vsphere deleteme-temp
            for v in $(echo ${_possible_versions}); do
                git -C deleteme-temp cat-file -t $(echo $v | cut -f2 -d'-') &> /dev/null && _filtered_versions+=($v)
            done
        } &> /dev/null

        CLUSTER_VERSION=$(printf "%s\n" "${_filtered_versions[@]}" | fzf --header "cluster version?" --prompt='λ' --cycle --delimiter='-' --preview-window right:80% --preview "git -C deleteme-temp show --color=always {2}")
        _ret=$?
    }

    check_result "${TEMPLATE_FILE}"
}

check_result() {
    [[ $# -lt 1 ]] && echo "usage: $0 file_path" && exit 1
    file_path="${1}"
    cat ${file_path} | envsubst | envsubst | bat -lyaml

    printf "Are you sure to create the cluster '$CLUSTER' on ${COL}'$(kubectl config current-context)'${RES}\nHit 'e' for modifying the manifests further.\nHit 'p' for printing the manifests to stdout."
	echo "[y/N/e/p]?"
	read -n1 _resp
	[[ $_resp =~ [yY] ]] && {
        # here we apply the manifests
        cat ${file_path} | envsubst | envsubst | kubectl apply -f -
    }
    [[ $_resp =~ [eE] ]] && {
        tmp="$(mktemp).yaml"
        cat ${file_path} | envsubst | envsubst > ${tmp}
        ${EDITOR} ${tmp}
        check_result ${tmp}
    }
    [[ $_resp =~ [pP] ]] && {
        cat ${file_path} | envsubst | envsubst
    }
}

delete() {
    CLUSTER=$(kubectl get cluster --no-headers -o custom-columns=":metadata.name" -A | fzf --header "Select cluster to delete" --prompt='λ')
    NS=$(kubectl get cluster -A | grep $CLUSTER | cut -d' ' -f1)

    echo "Are you sure to delete cluster '$CLUSTER' in namespace '$NS' on $(kubectl config current-context):"
	echo "[y/N]?"
	read -n1 _resp
	[[ $_resp =~ [yY] ]] && {
        kubectl delete cm $CLUSTER-user-values -n$NS
        kubectl delete app $CLUSTER $CLUSTER-default-apps -n$NS
    }
}

check_template() {
    if [[ -f "${TEMPLATE_FILE}" ]]; then
        return
    fi
    if [[ -f "${DIR}/${TEMPLATE_FILE}" ]]; then
        export TEMPLATE_FILE="${DIR}/${TEMPLATE_FILE}"
        return
    fi
    [ "$(uname)" == "Darwin" ] && {
        export TEMPLATE_FILE="$(dirname `readlink $0 2> /dev/null` 2> /dev/null)/${TEMPLATE_FILE}"
    } || {
        export TEMPLATE_FILE="$(dirname `readlink -f $0 2> /dev/null` 2> /dev/null)/${TEMPLATE_FILE}"
    }
    if [[ ! -f "${TEMPLATE_FILE}" ]]; then
        echo "File ${TEMPLATE_FILE} does not exist, provide a valid \"TEMPLATE_FILE\""
        exit 2
    fi
}

print_usage() {
    cat << EOF

Usage: kubectl clu (c)reate | (d)elete

Available commands:
   create, c              Runs the interactive mode for creating the clulster
   delete, d              Runs the interactive mode for deleting the clulster
   --version, -v          Prints the version

Examples:
   kubectl clu create                       ... default usage
   TEMPLATE_FILE=~/asdf kubectl clu create  ... custom file that will be templated

Other env vars that can be passed:
   ORG
   DEFAULT_APPS_VERSION

EOF
}

print_version() {
  [ "$(uname)" == "Darwin" ] && {
    cat $(dirname `readlink $0 2> /dev/null` 2> /dev/null)/VERSION 2> /dev/null
  } || {
    cat $(dirname `readlink -f $0`)/VERSION
  }
}

cleanup() {
    # make sure the temp git repo was cleaned (in case signal was send during the cloning)
    rm -rf deleteme-temp
    exit 0
}
trap cleanup EXIT 1 2 3 6

main $@
